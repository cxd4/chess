Forsyth-Edwards Notation
--------------------------------------------------------------------------------
In the nineteenth century, David Forsyth designed a standard for recording any
chess position.  Forsyth's method for recording the initial chess position:
    rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR
        '1', '2', '3', '4', '5', '6', '7', '8':  spaces between pieces
        'K', 'Q', 'R', 'B', 'N', 'P':  placement of White pieces
        'k', 'q', 'r', 'b', 'n', 'p':  placement of Black pieces
        '/':  divider between ranks of the chessboard

It was not until the development of computer chess software that Steven Edwards
extended this standard to include five "data fields" after Forsyth's original:
    rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
    - active color:  must be either 'w' (White) or 'b' (Black)
    - castling availability:  '-' for no castling, 'KQkq' for all castling
    - en passant target square:  '-' for none, [square] for en passant capture
    - halfmove clock:  nonnegative integer, since pawn advance or capture
    - fullmove clock:  positive integer, current move number for the game

The official FEN specifications are available as part of Steven Edward's widely-
published PGN specifications and make all of the strict definitions to which
this application is dedicated in compliance.

Please input FEN records no longer than ninety-two ASCII character octets.

Maximally sized data field for piece placement data:  72 characters --
"1k1q1r1r/b11b1n1n/1p1p1p1p/1p1p1p1p/1P1P1P1P/1P1P1P1P/B11B1N1N/1K1Q1R1R "

Maximally sized data field for active color:  2 characters --
"w " or "b " (no other values acceptable)

Maximally sized data field for castling availability:  5 characters --
"KQkq "

Maximally sized data field for en passant target square:  3 characters --
"a3 ", "a6 ", "b3 ", "b6 ", "c3 ", "c6 ", "d3 ", "d6 ", "e3 ", "e6 ", ... "h6 "

Maximally sized data field for halfmove clock:  3 characters --
"50 " (or any other ten-digit number)

Maximally sized data field for fullmove clock:  theoretical
"100\0", "1000\0", "10000\0", ?

72 + 2 + 5 + 3 + 3 + 5 = 90

Entering a valid FEN record longer than ninety-two characters (as unlikely as
one's existence is) will result in truncation down to ninety-two characters and
its consequential invalidity.  The FEN record is allocated into a ninety-six-
byte buffer, but the last four bytes are reserved for ending the string buffer.

Return Values for FEN Record Loader
--------------------------------------------------------------------------------
Calling the program to load a FEN record to the internal game memory storage is
done by the method load_FEN().  The return slot of this function contains a
positive value if the function succeeds:  the fullmove clock number of how many
moves have ellapsed in the game history so far.  If the value sent back is
negative, the function did not succeed, due most likely to user error.  For the
reference of future vendors using this source code, here is a list of all error
codes that may be returned and their reasons for being sent.
(The field delimiter between all six parts of the string is exactly one space.)
    ret Cause of Error Signal
    --- ------------------------------------------------------------------------
     -1 '0' was specified in Forsyth's notation.  Only '12345678' are valid.
     -2 Rank was not terminated soon enough.  Use '/' to avoid buffer overflow.
     -3 Since the current character is not a decimal digit ('0' through '9'),
        it is assumed that assigning a piece to the board was intended.  The
        program could not identify the piece symbol in the record as valid.
     -4 All sixty-four squares are defined, but the field delimiter is missing.
     -5 Exactly eight squares of rank mapped but missing '/' delimiter.
     -6 Neither 'w' nor 'b' was specified in the active color data field.
     -7 Either 'w' or 'b' was specified but missing field delimiter.
     -8 All castling was disabled (iff. '-') but field delimiter expected.
     -9 Castling enabled (iff. "KQkq"/"KQk"?) but invalidly terminated field.
    -10 Some castling was enabled ("KQq"/"KQ"?) but invalidly terminated field.
    -11 Some castling was enabled ("Kkq"/"Kk"?) but invalidly terminated field.
    -12 Some castling was enabled ("Kq"/"K"?) but invalidly terminated field.
    -13 Some castling was enabled ("Qkq"/"Qk"?) but invalidly terminated field.
    -14 Some castling was enabled ("Qq"/"Q"?) but invalidly terminated field.
    -15 Some castling was enabled ("kq"/"k"?) but invalidly terminated field.
    -16 Castling on Black's Queen's side enabled but invalidly terminated field.
    -17 Failure to define valid file for en passant target square ('abcdefgh').
    -18 Unacceptable rank digit for en passant:  either '3' or '6' is required.
    -19 Missing field delimiter after data field for en passant target.
    -20 One or more digits of data field 5 were not valid digits ('0123456789').
    -21 ASCII-to-decimal conversion result violates the Fifty Move Draw Rule.
    -22 One or more digits of data field 6 were not valid digits ('0123456789').
    -23 User tried to set the fullmove clock to 0; this is not a valid move no..

Examples (of these^ and how to repair them):
/* to do, or I change my mind and delete this, too tired to decide now lol */

Binary Encoding of Positions
--------------------------------------------------------------------------------
The current chess position of the game is stored as a 64-byte memory buffer.
The buffer is a two-dimensional array:  of eight arrays of eight-byte pairs.

char game[8][8] = {
    0x02, 0x04, 0x23, 0x01, 0x00, 0x03, 0x24, 0x02, /* rank 1 */
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, /* rank 2 */
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* rank 3 */
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* rank 4 */
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* rank 5 */
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* rank 6 */
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, /* rank 7 */
    0x12, 0x14, 0x33, 0x11, 0x10, 0x13, 0x34, 0x12  /* rank 8 */ };

The initial value of the buffer, for the classical chess start position.

Each byte in the default table given above conforms to custom specifications.

The low-order nybble has these values defined:
    Bin. Hex.  Signal
    ---- ---- --------
    0000 0x00 King
    0001 0x01 Queen
    0010 0x02 Rook
    0011 0x03 Bishop
    0100 0x04 Knight
    0101 0x05 Pawn
    0110 0x06 unused
    0111 0x07 unused
    1000 0x08 ..
    1110 0x0E reserved
    1111 0x0F free

The high-order nybble has these values defined:
    Bin. Hex. Property
    ---- ---- --------------------------------------------------
    0000 0x00 normal
    0001 0x10 This piece is Black.
    0010 0x20 Valid castling destination square.
    0100 0x40 Valid `en passant` execute.
    1000 0x80 reserved for future vendor use (draw rules, maybe)
    1111 0xF0 undefined
